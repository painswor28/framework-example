[
  {
    "objectID": "training.html",
    "href": "training.html",
    "title": "PyTorch Quickstart with nbdev",
    "section": "",
    "text": "This section runs through API for common tasks in machine learning\n\n\n\nPyTorch has two primitives to work with data: torch.utils.data.DataLoader and torch.utils.data.Dataset. Dataset stores the samples and their corresponding labels, and DataLoader wraps an iterable around the Dataset.\n\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\nfrom yaml import safe_load\n\nparams = safe_load(open(\"../params.yaml\"))\n\nfrom dvclive import Live\n\nlive = Live(\"../training\")\n\nPyTorch offers domain-specific libraries such as TorchText, TorchVision, and TorchAudio, all of which include datasets. For this tutorial, we will be using a TorchVision dataset.\nThe torchvision.datasets module contains Dataset objects for many real-world vision data like CIFAR, COCO (full list here). In this tutorial, we use the FashionMNIST dataset. Every TorchVision Dataset includes two arguments: transform and target_transform to modify the samples and labels respectively.\nDownload training data from open datasets.\n\ntraining_data = datasets.FashionMNIST(\n    root=\"../data\",\n    train=True,\n    download=True,\n    transform=ToTensor(),\n)\n\nDownload test data from open datasets.\n\ntest_data = datasets.FashionMNIST(\n    root=\"../data\",\n    train=False,\n    download=True,\n    transform=ToTensor(),\n)\n\nWe pass the Dataset as an argument to DataLoader. This wraps an iterable over our dataset, and supports automatic batching, sampling, shuffling and multiprocess data loading. Here we define a batch size of 64, i.e. each element in the dataloader iterable will return a batch of 64 features and labels.\n\nbatch_size = 64\n\nCreate data loaders\n\ntest_dataloader = DataLoader(test_data, batch_size=batch_size)\ntrain_dataloader = DataLoader(training_data, batch_size=batch_size)\n\nfor X, y in test_dataloader:\n    print(f\"Shape of X [N, C, H, W]: {X.shape}\")\n    print(f\"Shape of y: {y.shape} {y.dtype}\")\n    break\n\nShape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])\nShape of y: torch.Size([64]) torch.int64\n\n\n\n\n\nTo define a neural network in PyTorch, we create a class that inherits from nn.Module. We define the layers of the network in the __init__ function and specify how data will pass through the network in the forward function. To accelerate operations in the neural network, we move it to the GPU if available.\nGet cpu or gpu device for training\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(f\"Using {device} device\")\n\nUsing cpu device\n\n\nDefine model\n\nclass NeuralNetwork(nn.Module):\n    def __init__(self):\n        super(NeuralNetwork, self).__init__()\n        self.flatten = nn.Flatten()\n        self.linear_relu_stack = nn.Sequential(\n            nn.Linear(28*28, 512),\n            nn.ReLU(),\n            nn.Linear(512, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10)\n        )\n\n    def forward(self, x):\n        x = self.flatten(x)\n        logits = self.linear_relu_stack(x)\n        return logits\n\n\nmodel = NeuralNetwork().to(device)\nprint(model)\n\nNeuralNetwork(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (linear_relu_stack): Sequential(\n    (0): Linear(in_features=784, out_features=512, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=512, out_features=512, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=512, out_features=10, bias=True)\n  )\n)\n\n\nRead more about building neural networks in PyTorch\n\n\n\nTo train a model, we need a loss function and an optimizer\n\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=params[\"lr\"])\n\nIn a single training loop, the model makes predictions on the training dataset (fed to it in batches), and backpropagates the prediction error to adjust the model’s parameters.\n\ndef train(dataloader, model, loss_fn, optimizer):\n    size = len(dataloader.dataset)\n    model.train()\n    last_loss = 0.0\n    for batch, (X, y) in enumerate(dataloader):\n        X, y = X.to(device), y.to(device)\n\n        # Compute prediction error\n        pred = model(X)\n        loss = loss_fn(pred, y)\n\n        # Backpropagation\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        if batch % 100 == 0:\n            loss, current = loss.item(), batch * len(X)\n            last_loss = loss\n            print(f\"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]\")\n\nWe also check the model’s performance against the test dataset to ensure it is learning.\n\ndef test(dataloader, model, loss_fn):\n    size = len(dataloader.dataset)\n    num_batches = len(dataloader)\n    model.eval()\n    test_loss, correct = 0, 0\n    with torch.no_grad():\n        for X, y in dataloader:\n            X, y = X.to(device), y.to(device)\n            pred = model(X)\n            test_loss += loss_fn(pred, y).item()\n            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n    test_loss /= num_batches\n    correct /= size\n    print(f\"Test Error: \\n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \\n\")\n\nThe training process is conducted over several iterations (epochs). During each epoch, the model learns parameters to make better predictions. We print the model’s accuracy and loss at each epoch; we’d like to see the accuracy increase and the loss decrease with every epoch.\n\nepochs = params[\"epochs\"]\nfor t in range(epochs):\n    print(f\"Epoch {t+1}\\n-------------------------------\")\n    train(train_dataloader, model, loss_fn, optimizer)\n    test(test_dataloader, model, loss_fn)\n    live.next_step()\nprint(\"Done!\")\n\nEpoch 1\n-------------------------------\nloss: 2.311246  [    0/60000]\nloss: 2.306192  [ 6400/60000]\nloss: 2.307190  [12800/60000]\nloss: 2.303523  [19200/60000]\nloss: 2.302620  [25600/60000]\nloss: 2.310335  [32000/60000]\nloss: 2.306589  [38400/60000]\nloss: 2.312041  [44800/60000]\nloss: 2.308785  [51200/60000]\nloss: 2.304009  [57600/60000]\nTest Error: \n Accuracy: 6.4%, Avg loss: 2.305941 \n\nEpoch 2\n-------------------------------\nloss: 2.311246  [    0/60000]\nloss: 2.306192  [ 6400/60000]\nloss: 2.307190  [12800/60000]\nloss: 2.303523  [19200/60000]\nloss: 2.302620  [25600/60000]\nloss: 2.310335  [32000/60000]\nloss: 2.306589  [38400/60000]\nloss: 2.312041  [44800/60000]\nloss: 2.308785  [51200/60000]\nloss: 2.304009  [57600/60000]\nTest Error: \n Accuracy: 6.4%, Avg loss: 2.305941 \n\nEpoch 3\n-------------------------------\nloss: 2.311246  [    0/60000]\nloss: 2.306192  [ 6400/60000]\nloss: 2.307190  [12800/60000]\nloss: 2.303523  [19200/60000]\nloss: 2.302620  [25600/60000]\nloss: 2.310335  [32000/60000]\nloss: 2.306589  [38400/60000]\nloss: 2.312041  [44800/60000]\nloss: 2.308785  [51200/60000]\nloss: 2.304009  [57600/60000]\nTest Error: \n Accuracy: 6.4%, Avg loss: 2.305941 \n\nEpoch 4\n-------------------------------\nloss: 2.311246  [    0/60000]\nloss: 2.306192  [ 6400/60000]\nloss: 2.307190  [12800/60000]\nloss: 2.303523  [19200/60000]\nloss: 2.302620  [25600/60000]\nloss: 2.310335  [32000/60000]\nloss: 2.306589  [38400/60000]\nloss: 2.312041  [44800/60000]\nloss: 2.308785  [51200/60000]\nloss: 2.304009  [57600/60000]\nTest Error: \n Accuracy: 6.4%, Avg loss: 2.305941 \n\nEpoch 5\n-------------------------------\nloss: 2.311246  [    0/60000]\nloss: 2.306192  [ 6400/60000]\nloss: 2.307190  [12800/60000]\nloss: 2.303523  [19200/60000]\nloss: 2.302620  [25600/60000]\nloss: 2.310335  [32000/60000]\nloss: 2.306589  [38400/60000]\nloss: 2.312041  [44800/60000]\nloss: 2.308785  [51200/60000]\nloss: 2.304009  [57600/60000]\nTest Error: \n Accuracy: 6.4%, Avg loss: 2.305941 \n\nDone!\n\n\n\n\n\nA common way to save a model is to serialize the internal state dictionary (containing the model parameters).\n\ntorch.save(model.state_dict(), \"../model.pth\")\nprint(\"Saved PyTorch Model State to model.pth\")\n\nSaved PyTorch Model State to model.pth"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "framework-example",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "framework-example",
    "section": "Install",
    "text": "Install\npip install framework_example"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "framework-example",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "eval.html",
    "href": "eval.html",
    "title": "PyTorch Model Evaluation with nbdev",
    "section": "",
    "text": "Working with Data\nPyTorch has two primitives to work with data: torch.utils.data.DataLoader and torch.utils.data.Dataset. Dataset stores the samples and their corresponding labels, and DataLoader wraps an iterable around the Dataset.\n\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\nPyTorch offers domain-specific libraries such as TorchText, TorchVision, and TorchAudio, all of which include datasets. For this tutorial, we will be using a TorchVision dataset.\nDownload test data from open datasets\n\ntest_data = datasets.FashionMNIST(\n    root=\"../data\",\n    train=False,\n    download=True,\n    transform=ToTensor(),\n)\n\nWe pass the Dataset as an argument to DataLoader. This wraps an iterable over our dataset, and supports automatic batching, sampling, shuffling and multiprocess data loading. Here we define a batch size of 64, i.e. each element in the dataloader iterable will return a batch of 64 features and labels.\n\nbatch_size = 64\n\nCreate data loaders\n\ntest_dataloader = DataLoader(test_data, batch_size=batch_size)\nfor X, y in test_dataloader:\n    print(f\"Shape of X [N, C, H, W]: {X.shape}\")\n    print(f\"Shape of y: {y.shape} {y.dtype}\")\n    break\n\nShape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])\nShape of y: torch.Size([64]) torch.int64\n\n\n\n\nCreating Models\nTo define a neural network in PyTorch, we create a class that inherits from nn.Module. We define the layers of the network in the __init__ function and specify how data will pass through the network in the forward function. To accelerate operations in the neural network, we move it to the GPU if available.\nDefine model\n\nclass NeuralNetwork(nn.Module):\n    def __init__(self):\n        super(NeuralNetwork, self).__init__()\n        self.flatten = nn.Flatten()\n        self.linear_relu_stack = nn.Sequential(\n            nn.Linear(28*28, 512),\n            nn.ReLU(),\n            nn.Linear(512, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10)\n        )\n\n    def forward(self, x):\n        x = self.flatten(x)\n        logits = self.linear_relu_stack(x)\n        return logits\n\n\n\nLoading Models\nThe process for loading a model includes re-creating the model structure and loading the state dictionary into it.\n\nmodel = NeuralNetwork()\nmodel.load_state_dict(torch.load(\"../model.pth\"))\n\n<All keys matched successfully>\n\n\nThis model can now be used to make predictions.\n\nclasses = [\n    \"T-shirt/top\",\n    \"Trouser\",\n    \"Pullover\",\n    \"Dress\",\n    \"Coat\",\n    \"Sandal\",\n    \"Shirt\",\n    \"Sneaker\",\n    \"Bag\",\n    \"Ankle boot\",\n]\n\n\nmodel.eval()\nx, y = test_data[0][0], test_data[0][1]\nwith torch.no_grad():\n    pred = model(x)\n    predicted, actual = classes[pred[0].argmax(0)], classes[y]\n    print(f'Predicted: \"{predicted}\", Actual: \"{actual}\"')\n\nPredicted: \"Ankle boot\", Actual: \"Ankle boot\""
  }
]